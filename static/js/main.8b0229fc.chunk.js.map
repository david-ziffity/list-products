{"version":3,"sources":["components/image.js","components/productlist.js","components/product-placeholder.js","App.js","serviceWorker.js","index.js"],"names":["Image","url","name","size","src","alt","Products","products","title","className","map","product","k","key","Custom","image","ItemName","SKU","ProductPlaceholder","count","cardshimmer","i","push","App","props","state","categoryName","loading","fetch","then","res","json","data","setState","Results","Selections","category","Items","Label","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8OAQeA,EAND,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KACvB,OACE,yBAAKC,IAAKH,EAAI,aAAaE,EAAME,IAAKH,KCgB7BI,EAjBE,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MACzB,OACE,yBAAKC,UAAU,aACX,4BAAKD,GACJD,EAASG,KAAI,SAACC,EAASC,GAAV,OACF,yBAAKH,UAAU,cAAcI,IAAKD,GAC9B,yBAAKH,UAAU,iBAAgB,kBAAC,EAAD,CAAQR,IAAKU,EAAQG,OAAOC,MAAOb,KAAMS,EAAQK,SAAUb,KAAK,SAC/F,yBAAKM,UAAU,gBACX,yBAAKA,UAAU,gBAAe,gCAASE,EAAQK,WAC/C,yBAAKP,UAAU,OAAf,SAA4BE,EAAQM,YCenDC,EAzBY,SAAC,GAIxB,IAJqC,IAAZC,EAAW,EAAXA,MAErBC,EAAc,GAETC,EAAI,EAAGA,GAAKF,EAAOE,IAExBD,EAAYE,KAAK,yBAAKb,UAAU,cAAcI,IAAKQ,GAC/C,yBAAKZ,UAAU,0BACf,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,mBAM3B,OACE,yBAAKA,UAAU,aACX,wBAAIA,UAAU,uBACbW,ICoBIG,G,wDAhCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTlB,SAAU,GACVmB,aAAc,GACdC,SAAS,GALE,E,gEASE,IAAD,OAChBC,MAAM,wIACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKC,SAAS,CACV1B,SAAUyB,EAAKE,QACfP,SAAS,EACTD,aAAcM,EAAKG,WAAWC,SAASC,MAAM,GAAGC,WAGvDC,MAAMC,QAAQC,O,+BAOjB,OACEC,KAAKjB,MAAME,QAAU,kBAAC,EAAD,CAAoBR,MAAO,IAAQ,kBAAC,EAAD,CAAUZ,SAAUmC,KAAKjB,MAAMlB,SAAUC,MAAOkC,KAAKjB,MAAMC,mB,GA7B3GiB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.8b0229fc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Image = ({url, name, size}) => {\n    return (\n      <img src={url+\"?format=A_\"+size} alt={name} />\n      );\n};\n\nexport default Image;","import React from 'react';\nimport Image from './image';\n\nconst Products = ({products, title}) => {\n    return (\n      <div className=\"container\">\n          <h1>{title}</h1>\n          {products.map((product, k) => (\n                      <div className=\"productcard\" key={k}>\n                          <div className=\"product-image\"><Image  url={product.Custom.image} name={product.ItemName} size=\"100\" /></div>\n                          <div className=\"product-info\">\n                              <div className=\"product-name\"><strong>{product.ItemName}</strong></div>\n                              <div className=\"sku\"> SKU: {product.SKU}</div>\n                          </div>\n                      </div>\n                      ))}\n      </div>\n      );\n};\n\nexport default Products;","import React from 'react';\n\nconst ProductPlaceholder = ({count}) => {\n\n    let cardshimmer = [];\n\n    for (var i = 1; i <= count; i++) {\n\n        cardshimmer.push(<div className=\"productcard\" key={i}>\n            <div className=\"product-image shimmer\"></div>\n            <div className=\"product-info\">\n                <div className=\"product-name shimmer\"></div>\n                <div className=\"sku shimmer\"></div>\n            </div>\n        </div>)\n\n    }\n\n    return (\n      <div className=\"container\">\n          <h1 className=\"page-title shimmer\"></h1>\n          {cardshimmer}\n      </div>\n      );\n\n};\n\nexport default ProductPlaceholder;\n","import React, { Component } from 'react';\nimport Products from './components/productlist'\nimport ProductPlaceholder from './components/product-placeholder'\n//import logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            products: [],\n            categoryName: '',\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://uselectric.hawksearch.com/sites/uselectric/?mpp=10&pg=1&category=Halogen--Quartz-Halogen&hawkcustom=region11&hawkoutput=json')\n          .then(res => res.json())\n          .then((data) => {\n              this.setState({\n                  products: data.Results,\n                  loading: false,\n                  categoryName: data.Selections.category.Items[0].Label\n              });\n          })\n          .catch(console.log);\n    }\n\n    render() {\n//        if (!this.state.products || !this.state.categoryName)\n//            return null;\n\n        return (\n          this.state.loading ? <ProductPlaceholder count={8} /> : <Products products={this.state.products} title={this.state.categoryName} />\n          )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}